#!/usr/bin/awk -f

function usage()
{
    echo "Usage:"
    echo " $0 [options]"
    echo "Options:"
    echo "     -h                   Display help or usage"
    echo "     -l <variable_list>   List of variables in the array (Optional)"
    exit 1;
}

function get_fields(start, end)
{
    result = $start;

    for (nr = start+1; nr <= end; nr++) {
	result = result " " $nr
    }
    return result;
}

BEGIN {
    VAR_LIST[0] = ""; delete VAR_LIST[0]

    for (ArgIndex = 1; ArgIndex < ARGC; ArgIndex++) {
	Arg = ARGV[ArgIndex];

	if (Arg !~ /^-./) { continue; }
	ARGV[ArgIndex] = "";

	if (Arg == "-h") {
	    usage();
	} else if (Arg == "-l") {
	    ArgIndex++;
	    split(ARGV[ArgIndex], Args," ")
	    for (A in Args) {
		VAR_LIST[length(VAR_LIST)] = Args[A];
	    }
	    ARGV[ArgIndex] = "";
	} else {
	    usage() > "/dev/stderr"
	}
    }
}

# process items from the config file
xs
/^HEADER:/	{ TYPE_HEADER = $2 }

/^TYPE:/	{ TYPE_NAME = get_fields(2, NF); }

/^NAME:/	{ ARRAY_NAME = $2}

/^MEMBER-NAME:/	{ MEMBER_NAME = $2 }

/^MEMBER-TYPE:/ { MEMBER_TYPE = get_fields(2, NF); }

# code to dump the generated .c file once config file is processed

END {
    # enable for debug
    if (0 == 1) {
	print "ARRAY_NAME  " ARRAY_NAME
	print "TYPE_HEADER " TYPE_HEADER
	print "TYPE_NAME   " TYPE_NAME

	print length(VAR_LIST)
	for (v in VAR_LIST) {
	    print "VAR_LIST " v  " = " VAR_LIST[v]
	}
    }

    if (length(ARRAY_NAME) == 0) {
	print "Must specify NAME: in input config file"  > "/dev/stderr"
	usage() > "/dev/stderr"
    }

    if (length(TYPE_NAME) == 0) {
	print "Must specify TYPE: in input config file"  > "/dev/stderr"
	usage() > "/dev/stderr"
    }

    if (length(TYPE_HEADER) == 0) {
	print "Must specify HEADER: in input config file"  > "/dev/stderr"
	usage() > "/dev/stderr"
    }

    if (length(MEMBER_NAME) > 0 && length(MEMBER_TYPE) == 0) {
	print "Must specify MEMBER-TYPE: when using MEMBER-NAME:" < "/dev/stderr"
	usage() > "/dev/stderr"
    }

    printf "// Generated with %s from %s\n", SCRIPT_NAME, CONFIG_FILE
    printf "// DO NOT EDIT THIS FILE DIRECTLY\n"
    printf "\n"
    printf("#include <%s>\n\n", TYPE_HEADER)

    for (v in VAR_LIST) {
	printf("extern %s %s;\n", TYPE_NAME, VAR_LIST[v])
    }
    print ""

    if (length(MEMBER_TYPE) > 0) {
	TYPE_NAME = MEMBER_TYPE;
    }

    if (length(MEMBER_NAME) > 0) {
	VAR_SUFFIX = "." MEMBER_NAME;
    } else {
	VAR_SUFFIX = ""
    }

    printf("%s *const %s[] = {\n", TYPE_NAME, ARRAY_NAME)
    for (v in VAR_LIST) {
	printf("\t&%s%s,\n", VAR_LIST[v], VAR_SUFFIX)
    }
    printf("\tNULL\n");

    printf("};\n");
}
